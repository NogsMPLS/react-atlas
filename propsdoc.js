module.exports = {"Autocomplete":{"description":"Auto Complete component is a very simple wrapper around the [React-Autosuggest](https://github.com/moroshko/react-autosuggest) component.\r\nRead there for more comprehensive documentation.","displayName":"Autocomplete","props":{"suggestions":{"type":{"name":"array"},"required":true,"description":"For a plain list of suggestions, every item in suggestions should be a single suggestion.\r\nIt's up to you what shape every suggestion takes.\r\n@examples const suggestions = [\r\n  {\r\n    text: 'Apple'\r\n  },\r\n  {\r\n    text: 'Banana'\r\n  },\r\n  {\r\n    text: 'Cherry'\r\n  },\r\n  {\r\n    text: 'Grapefruit'\r\n  },\r\n  {\r\n    text: 'Lemon'\r\n  }\r\n];"},"onSuggestionsUpdateRequested":{"type":{"name":"func"},"required":false,"description":"Normally, you would want to update suggestions as user types.\r\nYou might also want to update suggestions when user selects a suggestion or the input loses focus (so that, next time the input gets focus, suggestions will be up to date).","defaultValue":{"value":"function () {}","computed":false}},"getSuggestionValue":{"type":{"name":"func"},"required":true,"description":"When user navigates the suggestions using the Up and Down keys, the input should display the highlighted suggestion.\r\nYou design how suggestion is modelled. Therefore, it's your responsibility to tell Autosuggest how to map suggestions to input values.\r\n\nThis function gets:\r\n\nsuggestion - The suggestion in question\r\nIt should return a string.:\r\n\n@examples function getSuggestionValue(suggestion) {\r\nreturn suggestion.text;\r\n}"},"renderSuggestion":{"type":{"name":"func"},"required":true,"description":"Use your imagination to define how suggestions are rendered.\r\n`renderSuggestion` has the following signature:\r\n\nfunction renderSuggestion(suggestion, { value, valueBeforeUpDown })\r\nwhere:\r\n\nsuggestion - The suggestion to render\r\nvalue - The current value of the input\r\nvalueBeforeUpDown - The value of the input prior to Up/Down interactions.\r\nIf user didn't interact with Up/Down yet, it will be null.\r\nIt is useful if you want to highlight input's value in the suggestion (a.k.a the match), for example.\r\nIt should return a ReactElement.\r\n\n@examples function renderSuggestion(suggestion) {\r\n return (\r\n   <span>{suggestion.text}</span>\r\n );\r\n}"},"inputProps":{"type":{"name":"custom","raw":"(props, propName) => {\r\n  const inputProps = props[propName];\r\n\r\n  if (!inputProps.hasOwnProperty('value')) {\r\n    throw new Error('\\'inputProps\\' must have \\'value\\'.');\r\n  }\r\n\r\n  if (!inputProps.hasOwnProperty('onChange')) {\r\n    throw new Error('\\'inputProps\\' must have \\'onChange\\'.');\r\n  }\r\n}"},"required":false,"description":"Autosuggest is a controlled component.\r\nTherefore, you should pass at least a value and an onChange callback to the input field. You can pass additional props as well.\r\n\n@examples const inputProps = {\r\n  value: inputValue,  // `inputValue` usually comes from application state\r\n  onChange: onChange, // called when input value changes\r\n  type: 'search',\r\n  placeholder: 'Enter city or postcode'\r\n};"},"shouldRenderSuggestions":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"value => value.trim().length > 0","computed":false}},"onSuggestionSelected":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"function () {}","computed":false}},"multiSection":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"renderSectionTitle":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"function() {\r\n  throw new Error('`renderSectionTitle` must be provided');\r\n}","computed":false}},"getSectionSuggestions":{"type":{"name":"func"},"required":false,"description":"","defaultValue":{"value":"function() {\r\n  throw new Error('`getSectionSuggestions` must be provided');\r\n}","computed":false}},"focusInputOnSuggestionClick":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}},"theme":{"type":{"name":"object"},"required":false,"description":""},"id":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'1'","computed":false}}}},"Avatar":{"description":"Avatar component creates a circular area where an image, letter or icon/glyphicon can be presented. Great for user profiles and lists.\r\n\n**NOTE**: children will always take precedence over props passed into component.","displayName":"Avatar","props":{"children":{"type":{"name":"node"},"required":false,"description":"Children should be either a string, an icon/glyphicon, or an image tag.\r\n@examples \"SomeName\", <SomeIcon />, <img src=\"/path/to/image.jpg\"/>"},"className":{"type":{"name":"string"},"required":false,"description":"A css class name that will be appended to the wrapping div around the avatar.","defaultValue":{"value":"''","computed":false}},"icon":{"type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"For displaying an icon/glphyicon. Normally these will be another component or an element with a class on it.\r\n@examples <GithubIcon />, <i class=\"fa fa-github\"></i>","defaultValue":{"value":"''","computed":false}},"image":{"type":{"name":"string"},"required":false,"description":"Path to an image\r\n@examples \"http://path.to/an/image.jpg\""},"title":{"type":{"name":"string"},"required":false,"description":"A string. Avatar will use First letter of the string.\r\n@examples \"Nathan\" will output \"N\""}}},"Button":{"description":"A Generic button component.","displayName":"Button","props":{"children":{"type":{"name":"node"},"required":false,"description":"Anything that can be in a button. Usually text, but could also be icons/glyphs.\r\n@examples 'Save', 'Cancel'","defaultValue":{"value":"\"Default Button\"","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"define a custom css class name\r\n@examples \"btn\", \"btn-active\"","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"define a custom css class name\r\n@examples \"btn\", \"btn-active\"","defaultValue":{"value":"false","computed":false}},"outline":{"type":{"name":"bool"},"required":false,"description":"use outline styled button\r\n@examples <Button outline>","defaultValue":{"value":"false","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"define button href if anchor\r\n@examples '#', 'http://some-website.com/'"},"loading":{"type":{"name":"bool"},"required":false,"description":"set loading animation on button\r\n@examples <Button loading>","defaultValue":{"value":"false","computed":false}},"primary":{"type":{"name":"bool"},"required":false,"description":"use primary style button (button is set to this by default)\r\n@examples <Button primary>","defaultValue":{"value":"false","computed":false}},"type":{"type":{"name":"string"},"required":false,"description":""},"secondary":{"type":{"name":"bool"},"required":false,"description":"use secondary style button\r\n@examples <Button secondary>","defaultValue":{"value":"false","computed":false}},"success":{"type":{"name":"bool"},"required":false,"description":"use success style button\r\n@examples <Button success>","defaultValue":{"value":"false","computed":false}},"warning":{"type":{"name":"bool"},"required":false,"description":"use warning style button\r\n@examples <Button warning>","defaultValue":{"value":"false","computed":false}},"danger":{"type":{"name":"bool"},"required":false,"description":"use danger style button\r\n@examples <Button danger>","defaultValue":{"value":"false","computed":false}},"link":{"type":{"name":"bool"},"required":false,"description":"use link style button\r\n@examples <Button link>","defaultValue":{"value":"false","computed":false}},"large":{"type":{"name":"bool"},"required":false,"description":"use large style button\r\n@examples <Button large>","defaultValue":{"value":"false","computed":false}},"small":{"type":{"name":"bool"},"required":false,"description":"use small style button\r\n@examples <Button small>","defaultValue":{"value":"false","computed":false}},"block":{"type":{"name":"bool"},"required":false,"description":"use block style button\r\n@examples <Button block>"},"mini":{"defaultValue":{"value":"false","computed":false}},"raised":{"defaultValue":{"value":"false","computed":false}}}},"Card":{"description":"Simple Card component that wraps a div around content with card styling.","displayName":"Card","props":{"children":{"type":{"name":"node"},"required":true,"description":"Any HTML element or React Component.\r\n@examples <p>Some Text.</p>","defaultValue":{"value":"<p>Some card text.</p>","computed":false}}}},"Checkbox":{"description":"Simple component for a basic checkbox","displayName":"Checkbox","props":{"label":{"type":{"name":"string"},"required":false,"description":"Text for checkbox label\r\n@examples 'Some Label'"},"className":{"type":{"name":"string"},"required":false,"description":"A css class name that will be appended to the wrapping <label> element around the <input> and <span> elements.","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"If included, checkbox is disabled\r\n@examples <Checkbox disabled />, <Checkbox disabled={true} />","defaultValue":{"value":"false","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"If included, renders the checkbox and it's label inline, so it can be side-by-side to other content.","defaultValue":{"value":"false","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":"Text for checkbox label title. (i.e. \"alt-text\" for checkboxes, useful for accessibility). If not provided, will be label text.\r\n@examples 'Some Title'"},"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"Defines if checkbox should be checked on load."}}},"Dialog":{"description":"","displayName":"Dialog","props":{"active":{"type":{"name":"bool"},"required":false,"description":"defines if Dialog modal is active/open/popped-up.","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"The content inside the modal"},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"onOverlayClick":{"type":{"name":"func"},"required":false,"description":"Defines what should happen when someone clicks off of the Modal box"},"type":{"type":{"name":"enum","value":[{"value":"\"large\"","computed":false},{"value":"\"small\"","computed":false},{"value":"\"normal\"","computed":false}]},"required":false,"description":"What type/size of modal. Choose from 'small', 'normal', 'large'.","defaultValue":{"value":"\"normal\"","computed":false}},"body":{"type":{"name":"string"},"required":false,"description":""}}},"Drawer":{"description":"","displayName":"Drawer","props":{"active":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"onOverlayClick":{"type":{"name":"func"},"required":false,"description":""},"type":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'left'","computed":false}}}},"Dropdown":{"description":"Simple Composable Dropdown Component that wraps DropdownTrigger and DropdownContent components. Primarily useful for Navigational dropdowns, not form select dropdowns.","displayName":"Dropdown","props":{"className":{"defaultValue":{"value":"''","computed":false}}}},"DropdownContent":{"description":"Component used inside Dropdown to define content. Often paired with DropdownList & DropdownListItem.","displayName":"DropdownContent","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"DropdownList":{"description":"Optional component to use inside DropdownContent component, it just applies styles to a `<ul>` and wraps DropdownListItem","displayName":"DropdownList","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"DropdownListItem":{"description":"Optional component to use within DropdownList & DropdownContent components. It just sets styles to `<li>` in dropdowns.","displayName":"DropdownListItem","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"DropdownTrigger":{"description":"Contains the component or element that will trigger the Dropdown on and off.","displayName":"DropdownTrigger","props":{"children":{"type":{"name":"any"},"required":false,"description":""}}},"Form":{"description":"A simple wrapper around the regular HTML `<form>` element.","displayName":"Form","props":{"children":{"type":{"name":"node"},"required":false,"description":""}}},"GridCol":{"description":"Component that handles Col/Column part of a Grid system. Syntax  somewhat similar to bootstraps grid class syntax.","displayName":"GridCol","props":{"basis":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"gutter":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"A.width.gutter","computed":true}},"style":{"type":{"name":"object"},"required":false,"description":""},"lg":{"type":{"name":"string"},"required":false,"description":""},"md":{"type":{"name":"string"},"required":false,"description":""},"sm":{"type":{"name":"string"},"required":false,"description":""},"xs":{"type":{"name":"string"},"required":false,"description":""}}},"GridRow":{"description":"Component that handles Row part of a Grid system. Syntax is somewhat similar to bootstrap's grid class syntax.","displayName":"GridRow","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"input a css class name"},"gutter":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"A.width.gutter","computed":true}},"style":{"type":{"name":"object"},"required":false,"description":""}}},"Header":{"description":"","displayName":"Header","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"fixed":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}}}},"Hint":{"description":"Simple wrapper around a span to add 'hint'-like styles","displayName":"Hint"},"Input":{"description":"Input component. Takes a label prop and wraps label and input in a div. Takes regular input attributes as props as well","displayName":"Input","props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":""},"htmlFor":{"type":{"name":"string"},"required":false,"description":""},"maxLength":{"type":{"name":"number"},"required":false,"description":""},"inputText":{"type":{"name":"string"},"required":false,"description":""},"focus":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":""},"multiline":{"type":{"name":"bool"},"required":false,"description":""},"type":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'text'","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""},"inputLength":{"defaultValue":{"value":"0","computed":false}}}},"List":{"description":"Wrapper around `<ul>` element to apply styling to lists. Usually paired with `<ListItem>` and `<ListText>` components.","displayName":"List","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"ListItem":{"description":"Wrapper around `<li>` element that applies styles.","displayName":"ListItem"},"ListText":{"description":"Used inside `<ListItem>` when the Item has more complex needs for text and elements inside","displayName":"ListText","props":{"className":{"type":{"name":"string"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""}}},"Media":{"description":"Component to handle Media, such as Videos and Pictures and resize them based on aspect ratio.","displayName":"Media","props":{"aspectRatio":{"type":{"name":"enum","value":[{"value":"'wide'","computed":false},{"value":"'square'","computed":false}]},"required":false,"description":""},"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"color":{"type":{"name":"string"},"required":false,"description":""},"contentOverlay":{"type":{"name":"bool"},"required":false,"description":""},"image":{"type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":""}}},"Overlay":{"description":"Overlay component adds a 'shadowbox' to screen. Mostly used internally in the lib on the `<Dialog>` component.","displayName":"Overlay","props":{"active":{"type":{"name":"bool"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"invisible":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":""}}},"ProgressBar":{"description":"","displayName":"ProgressBar","props":{"buffer":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"transitionDuration":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'.35s'","computed":false}},"max":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"100","computed":false}},"min":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0","computed":false}},"mode":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'indeterminate'","computed":false}},"multicolor":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"type":{"type":{"name":"enum","value":[{"value":"'linear'","computed":false},{"value":"'circular'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'linear'","computed":false}},"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"from":{"name":"number","required":false},"to":{"name":"number","required":false}}}]},"required":false,"description":"","defaultValue":{"value":"0","computed":false}}}},"Radio":{"description":"","displayName":"Radio","props":{"defaultChecked":{"type":{"name":"bool"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":""},"name":{"type":{"name":"string"},"required":false,"description":""},"onBlur":{"type":{"name":"func"},"required":false,"description":""},"onChange":{"type":{"name":"func"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""},"onFocus":{"type":{"name":"func"},"required":false,"description":""},"value":{"type":{"name":"any"},"required":false,"description":""}}},"RadioGroup":{"description":"","displayName":"RadioGroup","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"name":{"type":{"name":"string"},"required":false,"description":""}}},"Slider":{"description":"","displayName":"Slider","props":{"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"editable":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"max":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"100","computed":false}},"min":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":""},"pinned":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"snaps":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"step":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0.01","computed":false}},"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"shape","value":{"from":{"name":"number","required":false},"to":{"name":"number","required":false}}}]},"required":false,"description":"","defaultValue":{"value":"0","computed":false}}}},"Snackbar":{"description":"","displayName":"Snackbar","props":{"active":{"type":{"name":"bool"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"timeout":{"type":{"name":"number"},"required":false,"description":""},"onTimeout":{"type":{"name":"func"},"required":false,"description":""},"children":{"type":{"name":"node"},"required":false,"description":""}}},"Switch":{"description":"","displayName":"Switch","props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"name":{"type":{"name":"string"},"required":false,"description":""},"onColor":{"type":{"name":"string"},"required":false,"description":""},"offColor":{"type":{"name":"string"},"required":false,"description":""},"buttonColor":{"type":{"name":"string"},"required":false,"description":""},"checked":{"defaultValue":{"value":"false","computed":false}},"className":{"defaultValue":{"value":"''","computed":false}}}},"Table":{"description":"","displayName":"Table","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"Tbody":{"description":"","displayName":"Tbody","props":{"children":{"type":{"name":"any"},"required":false,"description":""}}},"Td":{"description":"","displayName":"Td","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"Tfoot":{"description":"","displayName":"Tfoot","props":{"children":{"type":{"name":"any"},"required":false,"description":""}}},"Th":{"description":"","displayName":"Th","props":{"children":{"type":{"name":"any"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}}}},"Thead":{"description":"","displayName":"Thead","props":{"children":{"type":{"name":"any"},"required":false,"description":""}}},"Tr":{"description":"","displayName":"Tr","props":{"children":{"type":{"name":"any"},"required":false,"description":""}}},"Tab":{"description":"Individual Tab component used within `<Tabs>`. Can be disabled, hidden and also sent an onActive event trigger. Children become `<TabContent>`.","displayName":"Tab","props":{"active":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"disabled":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"hidden":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'Tab Title'","computed":false}},"onActive":{"type":{"name":"func"},"required":false,"description":""},"onClick":{"type":{"name":"func"},"required":false,"description":""}}},"TabContent":{"description":"Used within the `<Tabs>` Component to programatically determine the content of any given tab. There probably isn't any reason for you to actually use `<TabContent>` directly.","displayName":"TabContent","props":{"active":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"tabIndex":{"type":{"name":"number"},"required":false,"description":""}}},"Tabs":{"description":"Wrapper component to organize and produce tabs using multiple `<Tab>` components as children.","displayName":"Tabs","props":{"children":{"type":{"name":"node"},"required":false,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"index":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"0","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":""}}},"Tooltip":{"description":"","displayName":"Tooltip","props":{"inline":{"type":{"name":"bool"},"required":false,"description":""},"children":{"type":{"name":"any"},"required":false,"description":"","defaultValue":{"value":"<p>This is some text with tooltip</p>","computed":false}},"className":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"tooltip":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'Sample Tooltip Text'","computed":false}},"tooltipDelay":{"type":{"name":"number"},"required":false,"description":""},"tooltipHideOnClick":{"type":{"name":"bool"},"required":false,"description":""},"position":{"type":{"name":"string"},"required":false,"description":""}}}}